name: SPT Release Build

on:
  #schedule:
  #  - cron: "0 4 * * *" # Nightly should trigger at 4am UTC (11pm EST).
  repository_dispatch:
    types: [build-trigger]
  workflow_dispatch:
    inputs:
      buildTag:
        description: "The tag to build on"
        required: true
        type: string

concurrency:
  group: spt-release-build
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    container:
      image: refringe/spt-build-node:1.1.0
    outputs:
      proceed: ${{ steps.check-existence.outputs.proceed }}
      is_nightly: ${{ steps.determine-context.outputs.is_nightly }}
      branch_server: ${{ steps.determine-context.outputs.branch_server }}
      target_tag: ${{ steps.determine-context.outputs.target_tag }}
      build_type: ${{ steps.determine-build-type.outputs.build_type }}
      client_version: ${{ steps.versions.outputs.client_version }}
      spt_version: ${{ steps.versions.outputs.spt_version }}

    steps:
      - name: Determine Build Context
        id: determine-context
        shell: bash
        env:
          EVENT_NAME: ${{ github.event_name }}
          CLIENT_PAYLOAD_TAG: ${{ github.event.client_payload.tag }}
          WORKFLOW_INPUT_TAG: ${{ github.event.inputs.buildTag }}
        run: |
          echo "Determining build context..."
          if [[ "$EVENT_NAME" == "schedule" ]]; then
            echo "is_nightly=true" >> $GITHUB_OUTPUT
            echo "branch_server=4.0.0-DEV" >> $GITHUB_OUTPUT
            echo "Context is nightly build"
          else
            echo "is_nightly=false" >> $GITHUB_OUTPUT
            # Determine the tag based on the event type
            if [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
              TAG_NAME="$WORKFLOW_INPUT_TAG"
            elif [[ "$EVENT_NAME" == "repository_dispatch" ]]; then
              TAG_NAME="$CLIENT_PAYLOAD_TAG"
            else
              echo "Unsupported event: $EVENT_NAME"
              exit 1
            fi

            if [[ -z "$TAG_NAME" ]]; then
              echo "No tag provided in event payload."
              exit 1
            fi

            # Halt the workflow if TAG_NAME starts with "4" or "v4"
            if [[ "$TAG_NAME" == 4* || "$TAG_NAME" == v4* ]]; then
              echo "Error: Tag name $TAG_NAME starts with 4. Unsupported version detected."
              exit 1
            fi

            echo "target_tag=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "Target tag is $TAG_NAME"
          fi

      - name: Determine Build Type
        id: determine-build-type
        shell: bash
        run: |
          if [[ "${{ steps.determine-context.outputs.is_nightly }}" == "true" ]]; then
            BUILD_TYPE="bleeding"
          else
            TARGET_TAG="${{ steps.determine-context.outputs.target_tag }}"
            TARGET_TAG_UPPER="${TARGET_TAG^^}"

            BUILD_TYPE="debug"
            if [[ "$TARGET_TAG_UPPER" =~ -BEM ]]; then
              BUILD_TYPE="bleedingmods"
            elif [[ "$TARGET_TAG_UPPER" =~ -BE ]]; then
              BUILD_TYPE="bleeding"
            elif [[ "$TARGET_TAG_UPPER" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              BUILD_TYPE="release"
            fi
          fi
          echo "build_type=$BUILD_TYPE" >> $GITHUB_OUTPUT
          echo "Build type is $BUILD_TYPE"

      - name: Check Existence
        id: check-existence
        shell: bash
        run: |
          PROCEED="true"
          if [[ "${{ steps.determine-context.outputs.is_nightly }}" == "true" ]]; then
            declare -A BRANCHES=(
              [Server]="https://github.com/sp-tarkov/server.git@${{ steps.determine-context.outputs.branch_server }}"
            )
            for REPO_NAME in "${!BRANCHES[@]}"; do
              REPO_URL="${BRANCHES[$REPO_NAME]%@*}"
              BRANCH="${BRANCHES[$REPO_NAME]##*@}"
              echo "Checking for branch $BRANCH in $REPO_NAME..."
              if ! git ls-remote --heads $REPO_URL $BRANCH | grep -q $BRANCH; then
                echo "Branch $BRANCH not found in $REPO_URL"
                PROCEED="false"
                break
              fi
            done
          else
            TAG="${{ steps.determine-context.outputs.target_tag }}"
            REPOS=("https://github.com/sp-tarkov/server.git")
            for REPO in "${REPOS[@]}"; do
              echo "Checking for tag $TAG in $REPO..."
              if ! git ls-remote --tags $REPO $TAG | grep -q $TAG; then
                echo "Tag $TAG not found in $REPO"
                PROCEED="false"
                break
              fi
            done
          fi
          echo "proceed=$PROCEED" >> $GITHUB_OUTPUT
          echo "Matches found. Proceeding with build."

      - name: Tag Not Found
        if: steps.check-existence.outputs.proceed == 'false'
        run: |
          echo "Required branch/tag not found in the repositorie, halting workflow."
          exit 1

      - name: Extract Versions
        id: versions
        shell: bash
        run: |
          rm -rf /workspace/SPT/Build/server-core
          git init /workspace/SPT/Build/server-core
          cd /workspace/SPT/Build/server-core
          git remote add origin https://github.com/sp-tarkov/server.git
          git config core.sparseCheckout true
          echo "project/assets/configs/core.json" >> .git/info/sparse-checkout

          if [[ "${{ steps.determine-context.outputs.is_nightly }}" == "true" ]]; then
            REF=${{ steps.determine-context.outputs.branch_server }}
          else
            REF=${{ steps.determine-context.outputs.target_tag }}
          fi

          git fetch --depth=1 origin "${REF}"
          git checkout FETCH_HEAD

          cd project/assets/configs
          SPT_VERSION=$(jq -r '.sptVersion' core.json)
          FULL_VERSION=$(jq -r '.compatibleTarkovVersion' core.json)
          CLIENT_VERSION=${FULL_VERSION##*.}

          echo "client_version=$CLIENT_VERSION" >> $GITHUB_OUTPUT
          echo "spt_version=$SPT_VERSION" >> $GITHUB_OUTPUT

          echo "Client version is $CLIENT_VERSION"
          echo "SPT version is $SPT_VERSION"

  build-server:
    strategy:
      matrix:
        os: [ "ubuntu-latest" ,"windows-latest" ]
    needs: prepare
    if: needs.prepare.outputs.proceed == 'true'
    runs-on: ${{ matrix.os }}
    outputs:
      server_commit: ${{ steps.commit-hash.outputs.server_commit }}
      platform: ${{ steps.get-platform.outputs.platform }}
    steps:
      - name: Setup Git Target
        shell: pwsh
        run: |
          if ("${{ needs.prepare.outputs.is_nightly }}" -eq "true") {
            echo "TARGET=${{ needs.prepare.outputs.branch_server }}" >> $env:GITHUB_ENV
          }
          else {
            echo "TARGET=${{ needs.prepare.outputs.target_tag }}" >> $env:GITHUB_ENV
          }

      - name: Clone Server
        shell: pwsh
        run: |
          $serverPath = "$env:GITHUB_WORKSPACE/SPT/Build/server"
          # Delete old remnants of the last build.
          if (Test-Path $serverPath) {
              Remove-Item -Recurse -Force $serverPath
          }
          # Decide which ref to clone.
          if ("${{ needs.prepare.outputs.is_nightly }}" -eq "true") {
              $TARGET = "${{ needs.prepare.outputs.branch_server }}"
          } else {
              $TARGET = "${{ needs.prepare.outputs.target_tag }}"
          }

          Write-Host "Cloning target: $TARGET"
          git clone https://github.com/sp-tarkov/server.git --branch $TARGET --depth 1 $serverPath

          # Pull LFS files.
          Set-Location $serverPath
          git lfs install --local
          git lfs pull

      - name: Output Commit Hash
        id: commit-hash
        shell: pwsh
        run: echo "server_commit=$(git rev-parse --short HEAD)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        working-directory: ./SPT/Build/server

      - uses: actions/setup-node@v4
        with:
          node-version-file: "SPT/Build/server/project/.nvmrc"
          cache: "npm"
          cache-dependency-path: "SPT/Build/server/project/package.json"

      - name: Install NPM Dependencies
        run: npm install
        working-directory: ./SPT/Build/server/project

      - name: Build Server
        shell: pwsh
        run: npm run build:${{ needs.prepare.outputs.build_type }} -- --arch=x64
        working-directory: ./SPT/Build/server/project

      - name: Upload Server Artifact
        uses: actions/upload-artifact@v4
        with:
          name: server-artifact
          path: ./SPT/Build/server/project/build/
          retention-days: 1
          if-no-files-found: error
      
      - name: get platform
        id: get-platform
        shell: pwsh
        run: |
          if ($IsWindows) {
            echo "platform=windows" >> $GITHUB_OUTPUT
          } else {
            echo "platform=linux" >> $GITHUB_OUTPUT
          }

      - name: Clone Build Project
        uses: actions/checkout@v4
        with:
          repository: cocorico8/build-linux
          path: build

      - name: Generate Release Filename
        id: generate-filename
        working-directory: ./SPT/Build/server/project/build
        shell: bash
        run: |
          BUILD_TYPE=${{ needs.prepare.outputs.build_type }}
          SPT_VERSION=${{ needs.prepare.outputs.spt_version }}
          CLIENT_VERSION=${{ needs.prepare.outputs.client_version }}
          SERVER_COMMIT=${{ needs.build-server.outputs.server_commit }}
          TARGET_TAG=${{ needs.prepare.outputs.target_tag }}
          DATE=$(date +%Y%m%d)
          PLATFORM=${{needs.build-server.outputs.platform}}

          if [[ "${{ needs.prepare.outputs.is_nightly }}" == "true" ]]; then
            BASE_NAME="SPT-NIGHTLY-${SPT_VERSION}-${CLIENT_VERSION}-${SERVER_COMMIT}-${DATE}-${PLATFORM}"
          else
            UPPER_BUILD_TYPE=$(echo "$BUILD_TYPE" | tr '[:lower:]' '[:upper:]')
            UPPER_TARGET_TAG=$(echo "$TARGET_TAG" | tr '[:lower:]' '[:upper:]')

            if [ "$BUILD_TYPE" = "release" ]; then
              BASE_NAME="SPT-${SPT_VERSION}-${CLIENT_VERSION}-${SERVER_COMMIT}-${PLATFORM}"
            else
              TAG_PART=""
              if [[ "$UPPER_TARGET_TAG" == *-*-* ]]; then
                SUFFIX="${UPPER_TARGET_TAG##*-}"
                if [ "$SUFFIX" != "$UPPER_TARGET_TAG" ]; then
                  TAG_PART="-${SUFFIX}"
                fi
              fi
              if [ -n "$TAG_PART" ]; then
                BASE_NAME="SPT-${UPPER_BUILD_TYPE}-${SPT_VERSION}-${CLIENT_VERSION}-${SERVER_COMMIT}-${TAG_PART}-${PLATFORM}"
              else
                BASE_NAME="SPT-${UPPER_BUILD_TYPE}-${SPT_VERSION}-${CLIENT_VERSION}-${SERVER_COMMIT}-${DATE}-${PLATFORM}"
              fi
            fi
          fi

          echo "base_name=$BASE_NAME" >> $GITHUB_OUTPUT
          echo "build_name=${BASE_NAME}.7z" >> $GITHUB_OUTPUT

          echo "Release filename: ${BASE_NAME}.7z"

      - name: Compress Release
        id: compress-release
        working-directory: ./SPT/Build/server/project/build
        shell: bash
        run: |
          cd release
          7z a -mx=9 -m0=lzma2 "./${{ steps.generate-filename.outputs.build_name }}" ./*
          echo "Release compressed as ./${{ steps.generate-filename.outputs.build_name }}."

          FILE_SIZE_MB=$(stat -c %s "./${{ steps.generate-filename.outputs.build_name }}" | awk '{printf "%.2f MB", $1 / 1024 / 1024}')
          FILE_HASH=$(md5sum "./${{ steps.generate-filename.outputs.build_name }}" | awk '{print $1}' | xxd -r -p | base64)
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.target_tag }}
          name: SPT-Server-Linux ${{ needs.prepare.outputs.spt_version }} (${{ needs.build-server.outputs.server_commit }})
          files: |
            ${{ steps.generate-filename.outputs.build_name }}
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
